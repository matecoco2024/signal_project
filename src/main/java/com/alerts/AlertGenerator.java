package com.alerts;


import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

import com.data_management.DataStorage;
import com.data_management.Patient;
import com.data_management.PatientRecord;

/**
 * The {@code AlertGenerator} class is responsible for monitoring patient data
 * and generating alerts when certain predefined conditions are met. This class
 * relies on a {@link DataStorage} instance to access patient data and evaluate
 * it against specific health criteria.
 */
public class AlertGenerator {
    private static final Logger logger = Logger.getLogger(AlertGenerator.class.getName());

    private DataStorage dataStorage;
    private List<Alert> alerts;

    /**
     * Constructs an {@code AlertGenerator} with a specified {@code DataStorage}.
     * The {@code DataStorage} is used to retrieve patient data that this class
     * will monitor and evaluate.
     *
     * @param dataStorage the data storage system that provides access to patient
     *                    data
     */
    public AlertGenerator(DataStorage dataStorage) {
        this.dataStorage = dataStorage;
        this.alerts = new ArrayList<>();
    }

    /**
     * Getter for the list of alerts generated by the monitoring system.
     *
     * @return the list of alerts
     */
    public List<Alert> getAlerts() {
        return alerts;
    }

    /**
     * Evaluates the specified patient's data to determine if any alert conditions
     * are met. If a condition is met, an alert is triggered via the
     * {@link #triggerAlert} method.
     *
     * @param patient the patient data to evaluate for alert conditions
     */
    public void evaluateData(Patient patient) {
        try {
            List<PatientRecord> records = patient.getAllRecords();

            // Categorize records by type
            List<PatientRecord> diastolicPressureRecords = new ArrayList<>();
            List<PatientRecord> systolicPressureRecords = new ArrayList<>();
            List<PatientRecord> bloodSaturationRecords = new ArrayList<>();
            List<PatientRecord> ECGRecords = new ArrayList<>();

            for (PatientRecord record : records) {
                switch (record.getRecordType()) {
                    case "DiastolicPressure":
                        diastolicPressureRecords.add(record);
                        break;
                    case "SystolicPressure":
                        systolicPressureRecords.add(record);
                        break;
                    case "Saturation":
                        bloodSaturationRecords.add(record);
                        break;
                    case "ECG":
                        ECGRecords.add(record);
                        break;
                }
            }

            // Evaluate records for alerts
            checkDiastolicPressure(diastolicPressureRecords, patient.getPatientId());
            checkSystolicPressure(systolicPressureRecords, patient.getPatientId());
            checkBloodSaturation(bloodSaturationRecords, patient.getPatientId());
            checkHypotensiveHypoxemia(systolicPressureRecords, bloodSaturationRecords, patient.getPatientId());
            checkECG(ECGRecords, patient.getPatientId());
        } catch (Exception e) {
            logger.log(Level.SEVERE, "Error evaluating patient data", e);
        }
    }

    private void checkDiastolicPressure(List<PatientRecord> records, String patientId) {
        int count = 0;
        for (int i = records.size() - 1; i >= 0; i--) {
            logger.log(Level.INFO, "Checking diastolic pressure: {0}", records.get(i).getMeasurementValue());
            PatientRecord currentRecord = records.get(i);
            if (currentRecord.getMeasurementValue() > 120 || currentRecord.getMeasurementValue() < 60) {
                triggerAlert(new Alert(patientId, "Critical Threshold Pressure", currentRecord.getTimestamp()));
                break;
            } else {
                if (i > 0 && Math.abs(records.get(i - 1).getMeasurementValue() - currentRecord.getMeasurementValue()) > 10) {
                    count++;
                } else {
                    count = 0;
                }
            }
            if (count == 2) {
                triggerAlert(new Alert(patientId, "Pressure Trend Alert", currentRecord.getTimestamp()));
                break;
            }
        }
    }

    private void checkSystolicPressure(List<PatientRecord> records, String patientId) {
        int count = 0;
        for (int i = records.size() - 1; i >= 0; i--) {
            PatientRecord currentRecord = records.get(i);
            if (currentRecord.getMeasurementValue() > 180 || currentRecord.getMeasurementValue() < 90) {
                triggerAlert(new Alert(patientId, "Critical Threshold Pressure", currentRecord.getTimestamp()));
                break;
            } else {
                //logger.log(Level.INFO, "Checking systolic pressure: {0}", currentRecord.getMeasurementValue());
                if (i > 0 && Math.abs(records.get(i - 1).getMeasurementValue() - currentRecord.getMeasurementValue()) > 10) {
                    count++;
                    //logger.log(Level.INFO, "Count: {0}", count);
                } else {
                    count = 0;
                }
            }
            if (count == 2) {
                triggerAlert(new Alert(patientId, "Pressure Trend Alert", currentRecord.getTimestamp()));
                break;
            }
        }
    }

    private void checkBloodSaturation(List<PatientRecord> records, String patientId) {
        for (int i = records.size() - 1; i >= 0; i--) {
            PatientRecord currentRecord = records.get(i);
            logger.log(Level.INFO, "timestamp and value: {0}", currentRecord.getTimestamp() + " " + currentRecord.getMeasurementValue());
            if (currentRecord.getMeasurementValue() < 92) {
                triggerAlert(new Alert(patientId, " Low Saturation", currentRecord.getTimestamp()));
                break;
            } else {
                if (i >= 1 && records.get(i - 1).getMeasurementValue() - currentRecord.getMeasurementValue() > 5
                        && Math.abs(records.get(i - 1).getTimestamp() - currentRecord.getTimestamp()) <= 600000L) {
                    triggerAlert(new Alert(patientId, "Rapid Drop Saturation", currentRecord.getTimestamp()));
                }
            }
        }
    }

    private void checkHypotensiveHypoxemia(List<PatientRecord> systolicRecords, List<PatientRecord> saturationRecords, String patientId) {
        if (systolicRecords.isEmpty() || saturationRecords.isEmpty()) return;
        for (int i = 1; i <= Math.max(systolicRecords.size(), saturationRecords.size()); i++) {
            double latestSystolic = systolicRecords.get(systolicRecords.size() - i).getMeasurementValue();
            double latestSaturation = saturationRecords.get(saturationRecords.size() - i).getMeasurementValue();
            if (latestSystolic < 90 && latestSaturation <= 92) {
                triggerAlert(new Alert(patientId, "Hypotensive Hypoxemia", systolicRecords.get(systolicRecords.size() - 1).getTimestamp()));
            }
            // logger.log(Level.INFO, "Checking hypotensive hypoxemia: {0}", latestSaturation + " " + latestSystolic);
        }
    }

    private void checkECG(List<PatientRecord> records, String patientId) {
        if (records.isEmpty()) return;
        for (int i = records.size() - 1; i >= 0; i--) {
            PatientRecord curenRecord = records.get(i);
            if (curenRecord.getMeasurementValue() > 100 || curenRecord.getMeasurementValue() < 50) {
                triggerAlert(new Alert(patientId, "Abnormal Heart Rate", records.get(i).getTimestamp()));
            } else {
                if (i > 0 && Math.abs(records.get(i - 1).getMeasurementValue() - curenRecord.getMeasurementValue()) >= 15) {
                    triggerAlert(new Alert(patientId, "Irregular Beat", records.get(i).getTimestamp()));
                }
            }
        }
    }

    /*
     * Triggers an alert and logs the alert message.
     
        * @param alert the alert to trigger
        
     */
    private void triggerAlert(Alert alert) {
        alerts.add(alert);
        logger.log(Level.WARNING, "ALERT: {0}", alert.getCondition());
    }
}
